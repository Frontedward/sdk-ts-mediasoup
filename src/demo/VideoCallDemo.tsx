import React, { useEffect, useState, useMemo } from 'react';
import { observer } from 'mobx-react-lite';
import { VideoCallClient } from '../sdk/video-call-client';
import { ConnectionStatus, Participant } from '../sdk/types';
import { CallStore } from '../sdk/store/call-store';
import { MockSignalingChannel } from '../sdk/signaling/signaling-channel';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
const ParticipantView: React.FC<{ participant: Participant; client: VideoCallClient }> = observer(({ participant, client }) => {
  const videoRef = React.useRef<HTMLVideoElement>(null);
  const currentUserId = client.getCurrentUserId();

  useEffect(() => {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    if (participant.userId === currentUserId) {
      const videoTrack = client.getDeviceManager().getVideoTrack();
      if (videoTrack && videoRef.current) {
        videoRef.current.srcObject = new MediaStream([videoTrack]);
      } else if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
      return;
    }

    // –î–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ mock —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç consumers
    const videoConsumer = Object.values(participant.consumers)
      .find(consumer => consumer.type === 'video');
    
    if (videoConsumer?.track && videoRef.current) {
      videoRef.current.srcObject = new MediaStream([videoConsumer.track]);
    } else if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  }, [participant.consumers, participant.producers, participant.userId, currentUserId, client]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ
  const isLocalUser = participant.userId === currentUserId;
  const hasLocalVideo = isLocalUser && client.getDeviceManager().getVideoTrack();
  const hasRemoteVideo = !isLocalUser && Object.values(participant.producers).some(p => p.type === 'video');
  


  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const displayName = isLocalUser 
    ? `${participant.displayName || participant.userId} (–í—ã)` 
    : (participant.displayName || participant.userId);

  return (
    <div className="aspect-video bg-gray-800 rounded-lg overflow-hidden relative">
      {(hasLocalVideo || hasRemoteVideo) ? (
        <>
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted={isLocalUser}
            className="w-full h-full object-cover"
          />
          {/* –î–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ mock —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø–æ–≤–µ—Ä—Ö –≤–∏–¥–µ–æ */}
          {!isLocalUser && (
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
              <div className="text-center text-white">
                <div className="text-6xl mb-4">üìπ</div>
                <div className="text-lg font-semibold">–í–∏–¥–µ–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞</div>
                <div className="text-sm opacity-75">(Mock —Ä–µ–∂–∏–º)</div>
              </div>
            </div>
          )}
        </>
      ) : (
        <div className="w-full h-full flex items-center justify-center text-white">
          <div className="text-center">
            <div className="text-4xl mb-2">üë§</div>
            <div>–ù–µ—Ç –≤–∏–¥–µ–æ</div>
          </div>
        </div>
      )}
      <div className="absolute bottom-2 left-2 text-white bg-black bg-opacity-50 px-2 py-1 rounded">
        {displayName}
      </div>
    </div>
  );
});

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–º–æ
export const VideoCallDemo: React.FC = observer(() => {
  const client = useMemo(() => new VideoCallClient({
    signalingChannel: new MockSignalingChannel(),
    autoReconnect: true,
    useSimulcast: false
  }), []);

  const [store] = useState(() => new CallStore(client));
  const [roomId, setRoomId] = useState('');
  const [userId, setUserId] = useState('');
  const [displayName, setDisplayName] = useState('');

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–≤–æ–Ω–∫—É
  const handleJoin = async () => {
    try {
      await client.joinCall(roomId, userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∑–≤–æ–Ω–∫–∞
  const handleLeave = async () => {
    try {
      await client.leaveCall();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">–î–µ–º–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞</h1>

      {/* –§–æ—Ä–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      {store.connectionStatus === ConnectionStatus.DISCONNECTED && (
        <div className="mb-4 p-4 border rounded-lg">
          <h2 className="text-lg font-semibold mb-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–≤–æ–Ω–∫—É</h2>
          <div className="space-y-2">
            <input
              type="text"
              placeholder="ID –∫–æ–º–Ω–∞—Ç—ã"
              value={roomId}
              onChange={(e) => setRoomId(e.target.value)}
              className="w-full p-2 border rounded"
            />
            <input
              type="text"
              placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              className="w-full p-2 border rounded"
            />
            <input
              type="text"
              placeholder="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"
              value={displayName}
              onChange={(e) => setDisplayName(e.target.value)}
              className="w-full p-2 border rounded"
            />
            <button
              onClick={handleJoin}
              disabled={!roomId || !userId}
              className="w-full bg-blue-500 text-white p-2 rounded disabled:bg-gray-300"
            >
              –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </button>
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
      <div className="mb-4">
        –°—Ç–∞—Ç—É—Å: {store.connectionStatus}
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ */}
      {store.connectionStatus === ConnectionStatus.CONNECTED && (
        <div className="mb-4 flex space-x-2">
          <button
            onClick={() => store.toggleVideo()}
            className={`px-4 py-2 rounded ${
              store.localVideoEnabled ? 'bg-red-500' : 'bg-green-500'
            } text-white`}
          >
            {store.localVideoEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ' : '–í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ'}
          </button>
          <button
            onClick={() => store.toggleAudio()}
            className={`px-4 py-2 rounded ${
              store.localAudioEnabled ? 'bg-red-500' : 'bg-green-500'
            } text-white`}
          >
            {store.localAudioEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ' : '–í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ'}
          </button>
          <button
            onClick={handleLeave}
            className="px-4 py-2 bg-red-500 text-white rounded"
          >
            –ü–æ–∫–∏–Ω—É—Ç—å –∑–≤–æ–Ω–æ–∫
          </button>
        </div>
      )}

      {/* –°–µ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      <div className="grid grid-cols-2 gap-4">
        {/* –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–≤–∫–ª—é—á–∞—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ) */}
        {Object.values(store.participants).map((participant) => (
          <ParticipantView
            key={participant.userId}
            participant={participant}
            client={client}
          />
        ))}
      </div>
    </div>
  );
}); 